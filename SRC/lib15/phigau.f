      real*8 function phigau( r )
c  Copyright (C) 2014, Jerry Sellwood
      implicit none
c gravitiational potential in the plane of a full mass Gaussian disc
c
c calling argument
      real*8 r
c
c common block
c
      include 'inc/params.f'
c
      include 'inc/model.f'
c
c externals
      real*8 algrng2, phigsz
c
c local arrays
      integer ntab
      parameter ( ntab = 100 )
      real*8 x( ntab + 1 ), y( ntab + 1 )
c
c local variables
      integer i, iuse, j
      real*8 rad, zed
      save iuse
      data iuse / 0 /
c this table of data is for the wrong disk scale!
c$$$      data x / 0.00, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08,
c$$$     2         0.09, 0.10, 0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17,
c$$$     3         0.18, 0.19, 0.20, 0.21, 0.22, 0.23, 0.24, 0.25, 0.26,
c$$$     4         0.27, 0.28, 0.29, 0.30, 0.31, 0.32, 0.33, 0.34, 0.35,
c$$$     5         0.36, 0.37, 0.38, 0.39, 0.40, 0.41, 0.42, 0.43, 0.44,
c$$$     6         0.45, 0.46, 0.47, 0.48, 0.49, 0.50, 0.51, 0.52, 0.53,
c$$$     7         0.54, 0.55, 0.56, 0.57, 0.58, 0.59, 0.60, 0.61, 0.62,
c$$$     8         0.63, 0.64, 0.65, 0.66, 0.67, 0.68, 0.69, 0.70, 0.71,
c$$$     9         0.72, 0.73, 0.74, 0.75, 0.76, 0.77, 0.78, 0.79, 0.80,
c$$$     1         0.81, 0.82, 0.83, 0.84, 0.85, 0.86, 0.87, 0.88, 0.89,
c$$$     2         0.90, 0.91, 0.92, 0.93, 0.94, 0.95, 0.96, 0.97, 0.98,
c$$$     3         0.99, 1.00 /
c$$$      data ( y( i ), i = 1, 51 ) /
c$$$     1  -1.772453850905516, -1.790266093204964, -1.808249797064983,
c$$$     2  -1.826398403489558, -1.844704441349535, -1.863159449305542,
c$$$     3  -1.881753892039220, -1.900477070479186, -1.919317025710144,
c$$$     4  -1.938260436260431, -1.957292508476417, -1.976396859712827,
c$$$     5  -1.995555394098051, -2.014748170674742, -2.033953263770896,
c$$$     6  -2.053146615527751, -2.072301880601612, -2.091390263170503,
c$$$     7  -2.110380346517899, -2.129237915639328, -2.147925773529038,
c$$$     8  -2.166403552059548, -2.184627518673666, -2.202550380474755,
c$$$     9  -2.220121087735137, -2.237284639354514, -2.253981893400458,
c$$$     1  -2.270149386562545, -2.285719167162115, -2.300618647292506,
c$$$     2  -2.314770480731074, -2.328092474474214, -2.340497543107588,
c$$$     3  -2.351893716739679, -2.362184214895953, -2.371267600583428,
c$$$     4  -2.379038030670359, -2.385385620746377, -2.390196944678193,
c$$$     5  -2.393355691071217, -2.394743500670823, -2.394241010228256,
c$$$     6  -2.391729129302491, -2.387090576594452, -2.380211701363104,
c$$$     7  -2.370984612818592, -2.359309635597950, -2.345098101881151,
c$$$     8  -2.328275479688987, -2.308784821642308, -2.286590498154954 /
c$$$      data ( y( i ), i = 52, 101 ) /
c$$$     9  -2.261682152933370, -2.234078786188670, -2.203832831901829,
c$$$     1  -2.171034050178134, -2.135813005450431, -2.098343848615546,
c$$$     2  -2.058846070450774, -2.017584851422764, -1.974869608444000,
c$$$     3  -1.931050344166325, -1.886511453315336, -1.841662748831647,
c$$$     4  -1.796927652421880, -1.752728758503489, -1.709471325385214,
c$$$     5  -1.667525652545270, -1.627209722126633, -1.588773839858491,
c$$$     6  -1.552389200581336, -1.518142207084757, -1.486035885616803,
c$$$     7  -1.455998830140119, -1.427900854514782, -1.401573181710226,
c$$$     8  -1.376829940086579, -1.353487394413733, -1.331377982191563,
c$$$     9  -1.310357757707849, -1.290307732919991, -1.271131070472071,
c$$$     1  -1.252748547031005, -1.235094158151054, -1.218111729292221,
c$$$     2  -1.201752581786736, -1.185973960541611, -1.170737933762290,
c$$$     3  -1.156010581776310, -1.141761374463754, -1.127962680122048,
c$$$     4  -1.114589370165799, -1.101618495898377, -1.089029020758782,
c$$$     5  -1.076801596071824, -1.064918371445230, -1.053362833125990,
c$$$     6  -1.042119665177897, -1.031174629473883, -1.020514461292681,
c$$$     7  -1.010126778319467, -1.000000000000000 /
c
      if( iuse .eq. 0 )then
c create table
        print *, ' building a table for potential of a gaussian disc'
        zed = epsiln
        do j = 1, ntab
          i = j - 1
c uniform spacing in r / ( 1 + r )
          rad = dble( i ) / dble( ntab - i )
          x( j ) = dble( i ) / dble( ntab )
          y( j ) = phigsz( rad, zed ) * ( 1. + rad )
        end do
c end value
        x( ntab + 1 ) = 1
        y( ntab + 1 ) = -1
        iuse = 1
        print *, 'table ready'
      end if
c look up value in table
      phigau = algrng2( x, y, ntab + 1, r / ( 1. + r ) ) / ( 1. + r )
      return
      end
